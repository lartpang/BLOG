<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Simpler, Better</title><link>https://lartpang.github.io/me</link><description>Just for fun.</description><copyright>Simpler, Better</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://github.githubassets.com/favicons/favicon.svg</url><title>avatar</title><link>https://lartpang.github.io/me</link></image><lastBuildDate>Mon, 25 Mar 2024 09:38:33 +0000</lastBuildDate><managingEditor>Simpler, Better</managingEditor><ttl>60</ttl><webMaster>Simpler, Better</webMaster><item><title>Build OpenCV and OpenVINO for Windows 10 with VS 2022</title><link>https://lartpang.github.io/me/post/Build%20OpenCV%20and%20OpenVINO%20for%20Windows%2010%20with%20VS%202022.html</link><description>In this guide, I will build the two powerful open-source libraries, i.e., OpenCV and OpenVINO for running my deeplearning model on windows 10.&#13;
Interestingly, both libraries are closely associated with Intel 🖥️. &#13;
&#13;
## OpenCV 😮 &#13;
&#13;
First of all, we must download the related code projects (`opencv` and `opencv_contrib` containing some plugins for `opencv`) into our computer from this links:&#13;
&#13;
- https://github.com/opencv/opencv/releases&#13;
- https://github.com/opencv/opencv_contrib/tags&#13;
&#13;
Make sure the selected versions of the two libararies are the same.&#13;
Here, I choice the latest version `4.7.0`.&#13;
Because we will recompiling them by ourselves, we can just download the source code zip files.&#13;
Put the two unpacked libraries into the same parent folder `opencv_dir` as follows:&#13;
&#13;
```&#13;
-opencv_dir&#13;
  -opencv-4.7.0&#13;
    -...&#13;
  -opencv_contrib-4.7.0&#13;
    -modules&#13;
    -...&#13;
```&#13;
&#13;
**NOTE**: To avoid the network issue that may be encountered during using CMake, we need to add the url proxy prefix `https://ghproxy.com/` before the urls of some setting of the relevant modules like `https://ghproxy.com/https://raw.github***`:&#13;
- `.cmake` in `opencv-4.7.0/3rdparty/ippicv`&#13;
- `.cmake` in `opencv-4.7.0/3rdparty/ffmpeg`&#13;
- `CMakeLists.txt` in `opencv_contrib-4.7.0/modules/face`&#13;
- Files in `cmake` of `opencv_contrib-4.7.0/modules/xfeatures2d`&#13;
- `CMakeLists.txt` in `opencv_contrib-4.7.0/modules/wechat_qrcode`&#13;
- `CMakeLists.txt` in `opencv_contrib-4.7.0/modules/cudaoptflow`&#13;
&#13;
Next, start compiling OpenCV.&#13;
&#13;
1. Create the build folder: `cd opencv_dir &amp;&amp; mkdir opencv-build-vs2022`&#13;
2. Configure and generate the VS solution by CMake with some config items:&#13;
  - General:&#13;
    - source folder: `&lt;opencv-4.7.0&gt;`&#13;
    - build folder: `&lt;opencv-build-vs2022&gt;`&#13;
    - `BUILD_OPENCV_WORLD=ON`&#13;
    - `CMAKE_BUILD_TYPE=RELEASE`&#13;
    - `OPENCV_ENABLE_NONFREE=ON`&#13;
    - `BUILD_opencv_dnn=ON`&#13;
    - `OPENCV_EXTRA_MODULES_PATH=&lt;opencv_contrib-4.7.0/modules&gt;`&#13;
  - CUDA:&#13;
    - `WITH_CUDA=ON`&#13;
    - `WITH_CUDNN=ON`&#13;
    - `WITH_CUBLAS=ON`&#13;
    - `WITH_CUFFT=ON`&#13;
    - `CUDA_FAST_MATH=ON`&#13;
    - `CUDA_ARCH_BIN=7.5` (We can fill the single value corresponding to the real GPU for accelerating the compilation process.)&#13;
    - `OPENCV_DNN_CUDA=ON`&#13;
3. Go to the build directory: `cd &lt;opencv-build-vs2022&gt;`&#13;
4. Start build by cmake and msvc compiler: `cmake --build . --config Release --verbose -j8`&#13;
5. Install the built opencv into the `install` folder in the current path: `cmake --install . --prefix install`&#13;
6. Add the `bin` directory into the user environment: `&lt;path&gt;\install\x64\vc17\bin`&#13;
7. In VS:&#13;
    - add the `&lt;path&gt;\install\include` directory into "解决方案资源管理器-&gt;右键点击属性-&gt;VC++目录-&gt;外部包含目录"&#13;
    - add the `&lt;path&gt;\install\x64\vc17\lib` directory into "解决方案资源管理器-&gt;右键点击属性-&gt;VC++目录-&gt;库目录"&#13;
    - add the `opencv_world470.lib` into "解决方案资源管理器-&gt;右键点击属性-&gt;链接器-&gt;输入-&gt;附加依赖项"&#13;
&#13;
## OpenVINO 🍰 &#13;
&#13;
The document of OpenVINO is intuitive and the readability is better than OpenCV.&#13;
The relevant content about building and installing the libirary is listed in these links:&#13;
- https://github.com/openvinotoolkit/openvino/blob/master/docs/dev/build_windows.md&#13;
- https://github.com/openvinotoolkit/openvino/blob/master/docs/dev/cmake_options_for_custom_comiplation.md&#13;
- https://github.com/openvinotoolkit/openvino/blob/master/docs/dev/installing.md&#13;
&#13;
After building and install the OpenCV library, it's time to move on to OpenVINO.&#13;
&#13;
1. We need clone the project and the sub modules.&#13;
    ```&#13;
    git clone https://github.com/openvinotoolkit/openvino.git&#13;
    cd openvino&#13;
    git submodule update --init --recursive&#13;
    ```&#13;
2. Create the build folder: `mkdir build &amp;&amp; cd build`&#13;
3. Configure and generate the VS solution by CMake:&#13;
    - `ENABLE_INTEL_GPU=OFF` (We only use the Intel CPU.)&#13;
    - Disable some frontend items:&#13;
      - `ENABLE_OV_PDPD_FRONTEND=OFF`&#13;
      - `ENABLE_OV_TF_FRONTEND=OFF`&#13;
      - `ENABLE_OV_TF_LITE_FRONTEND=OFF`&#13;
      - `ENABLE_OV_PYTORCH_FRONTEND=OFF`&#13;
    - For Python:&#13;
      - `ENABLE_PYTHON=ON` It seems that `openvino-dev` needs to be installed first in the detected environment, otherwise a warning message will be thrown in the cmake-gui window.&#13;
      - `PYTHON_EXECUTABLE=&lt;python.exe&gt;`&#13;
      - `PYTHON_INCLUDE_DIR=&lt;incude directory&gt;`&#13;
      - `PYTHON_LIBIRARY=&lt;pythonxx.lib in libs directory&gt;`&#13;
    - For OpenCV:&#13;
      - `ENABLE_OPENCV=ON`&#13;
      - `OpenCV_DIR=&lt;opencv-build-vs2022/install&gt;`&#13;
4. Build the library: `cmake --build . --config Release --verbose -j8`&#13;
5. Install the library into the `install` directory: `cmake --install . --prefix install`&#13;
6. Add the `bin` directory into the environment:&#13;
    - `&lt;path&gt;\install\runtime\bin\intel64\Release`&#13;
    - `&lt;path&gt;\install\runtime\3rdparty\tbb\bin`&#13;
8. In VS:&#13;
    - add the `&lt;path&gt;\install\runtime\include` directory into "解决方案资源管理器-&gt;右键点击属性-&gt;VC++目录-&gt;外部包含目录"&#13;
    - add the `&lt;path&gt;\install\runtime\lib\intel64\Release` directory into "解决方案资源管理器-&gt;右键点击属性-&gt;VC++目录-&gt;库目录"&#13;
    - add the 🌟 `openvino.lib`, 🌟 `openvino_onnx_frontend.lib`, `openvino_c.lib` into "解决方案资源管理器-&gt;右键点击属性-&gt;链接器-&gt;输入-&gt;附加依赖项"&#13;
&#13;
## Set DLL path in IDE&#13;
&#13;
- VS: "right click on solution -&gt; Properties -&gt; Debugging -&gt; Environment -&gt; `PATH=&lt;path&gt;\install\x64\vc17\bin;%PATH%`"&#13;
- Qt Creator: "Projects -&gt; Build &amp; Run -&gt; Build/Run -&gt; Environment -&gt; Details -&gt; Eidt %PATH% -&gt; Add `&lt;path&gt;\install\x64\vc17\bin`"。</description><guid isPermaLink="true">https://lartpang.github.io/me/post/Build%20OpenCV%20and%20OpenVINO%20for%20Windows%2010%20with%20VS%202022.html</guid><pubDate>Mon, 25 Mar 2024 09:38:03 +0000</pubDate></item></channel></rss>