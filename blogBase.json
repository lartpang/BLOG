{"singlePage": [], "startSite": "", "filingNum": "", "onePageListNum": 15, "commentLabelColor": "#006b75", "yearColorList": ["#bc4c00", "#0969da", "#1f883d", "#A333D0"], "i18n": "CN", "dayTheme": "light", "nightTheme": "dark", "urlMode": "pinyin", "script": "", "style": "", "bottomText": "", "showPostSource": 1, "UTC": 8, "title": "Simpler, Better", "subTitle": "Just for fun.", "avatarUrl": "https://github.githubassets.com/favicons/favicon.svg", "GMEEK_VERSION": "last", "postListJson": {"P1": {"htmlDir": "docs/post/Build OpenCV and OpenVINO for Windows 10 with VS 2022.html", "label": "tool", "labelColor": "#3108A9", "postTitle": "Build OpenCV and OpenVINO for Windows 10 with VS 2022", "postUrl": "post/Build%20OpenCV%20and%20OpenVINO%20for%20Windows%2010%20with%20VS%202022.html", "postSourceUrl": "https://github.com/lartpang/me/issues/1", "commentNum": 0, "wordCount": 5369, "description": "In this guide, I will build the two powerful open-source libraries, i.e., OpenCV and OpenVINO for running my deeplearning model on windows 10.\r\nInterestingly, both libraries are closely associated with Intel \ud83d\udda5\ufe0f. \r\n\r\n## OpenCV \ud83d\ude2e \r\n\r\nFirst of all, we must download the related code projects (`opencv` and `opencv_contrib` containing some plugins for `opencv`) into our computer from this links:\r\n\r\n- https://github.com/opencv/opencv/releases\r\n- https://github.com/opencv/opencv_contrib/tags\r\n\r\nMake sure the selected versions of the two libararies are the same.\r\nHere, I choice the latest version `4.7.0`.\r\nBecause we will recompiling them by ourselves, we can just download the source code zip files.\r\nPut the two unpacked libraries into the same parent folder `opencv_dir` as follows:\r\n\r\n```\r\n-opencv_dir\r\n  -opencv-4.7.0\r\n    -...\r\n  -opencv_contrib-4.7.0\r\n    -modules\r\n    -...\r\n```\r\n\r\n**NOTE**: To avoid the network issue that may be encountered during using CMake, we need to add the url proxy prefix `https://ghproxy.com/` before the urls of some setting of the relevant modules like `https://ghproxy.com/https://raw.github***`:\r\n- `.cmake` in `opencv-4.7.0/3rdparty/ippicv`\r\n- `.cmake` in `opencv-4.7.0/3rdparty/ffmpeg`\r\n- `CMakeLists.txt` in `opencv_contrib-4.7.0/modules/face`\r\n- Files in `cmake` of `opencv_contrib-4.7.0/modules/xfeatures2d`\r\n- `CMakeLists.txt` in `opencv_contrib-4.7.0/modules/wechat_qrcode`\r\n- `CMakeLists.txt` in `opencv_contrib-4.7.0/modules/cudaoptflow`\r\n\r\nNext, start compiling OpenCV.\r\n\r\n1. Create the build folder: `cd opencv_dir && mkdir opencv-build-vs2022`\r\n2. Configure and generate the VS solution by CMake with some config items:\r\n  - General:\r\n    - source folder: `<opencv-4.7.0>`\r\n    - build folder: `<opencv-build-vs2022>`\r\n    - `BUILD_OPENCV_WORLD=ON`\r\n    - `CMAKE_BUILD_TYPE=RELEASE`\r\n    - `OPENCV_ENABLE_NONFREE=ON`\r\n    - `BUILD_opencv_dnn=ON`\r\n    - `OPENCV_EXTRA_MODULES_PATH=<opencv_contrib-4.7.0/modules>`\r\n  - CUDA:\r\n    - `WITH_CUDA=ON`\r\n    - `WITH_CUDNN=ON`\r\n    - `WITH_CUBLAS=ON`\r\n    - `WITH_CUFFT=ON`\r\n    - `CUDA_FAST_MATH=ON`\r\n    - `CUDA_ARCH_BIN=7.5` (We can fill the single value corresponding to the real GPU for accelerating the compilation process.)\r\n    - `OPENCV_DNN_CUDA=ON`\r\n3. Go to the build directory: `cd <opencv-build-vs2022>`\r\n4. Start build by cmake and msvc compiler: `cmake --build . --config Release --verbose -j8`\r\n5. Install the built opencv into the `install` folder in the current path: `cmake --install . --prefix install`\r\n6. Add the `bin` directory into the user environment: `<path>\\install\\x64\\vc17\\bin`\r\n7. In VS:\r\n    - add the `<path>\\install\\include` directory into \"\u89e3\u51b3\u65b9\u6848\u8d44\u6e90\u7ba1\u7406\u5668->\u53f3\u952e\u70b9\u51fb\u5c5e\u6027->VC++\u76ee\u5f55->\u5916\u90e8\u5305\u542b\u76ee\u5f55\"\r\n    - add the `<path>\\install\\x64\\vc17\\lib` directory into \"\u89e3\u51b3\u65b9\u6848\u8d44\u6e90\u7ba1\u7406\u5668->\u53f3\u952e\u70b9\u51fb\u5c5e\u6027->VC++\u76ee\u5f55->\u5e93\u76ee\u5f55\"\r\n    - add the `opencv_world470.lib` into \"\u89e3\u51b3\u65b9\u6848\u8d44\u6e90\u7ba1\u7406\u5668->\u53f3\u952e\u70b9\u51fb\u5c5e\u6027->\u94fe\u63a5\u5668->\u8f93\u5165->\u9644\u52a0\u4f9d\u8d56\u9879\"\r\n\r\n## OpenVINO \ud83c\udf70 \r\n\r\nThe document of OpenVINO is intuitive and the readability is better than OpenCV.\r\nThe relevant content about building and installing the libirary is listed in these links:\r\n- https://github.com/openvinotoolkit/openvino/blob/master/docs/dev/build_windows.md\r\n- https://github.com/openvinotoolkit/openvino/blob/master/docs/dev/cmake_options_for_custom_comiplation.md\r\n- https://github.com/openvinotoolkit/openvino/blob/master/docs/dev/installing.md\r\n\r\nAfter building and install the OpenCV library, it's time to move on to OpenVINO.\r\n\r\n1. We need clone the project and the sub modules.\r\n    ```\r\n    git clone https://github.com/openvinotoolkit/openvino.git\r\n    cd openvino\r\n    git submodule update --init --recursive\r\n    ```\r\n2. Create the build folder: `mkdir build && cd build`\r\n3. Configure and generate the VS solution by CMake:\r\n    - `ENABLE_INTEL_GPU=OFF` (We only use the Intel CPU.)\r\n    - Disable some frontend items:\r\n      - `ENABLE_OV_PDPD_FRONTEND=OFF`\r\n      - `ENABLE_OV_TF_FRONTEND=OFF`\r\n      - `ENABLE_OV_TF_LITE_FRONTEND=OFF`\r\n      - `ENABLE_OV_PYTORCH_FRONTEND=OFF`\r\n    - For Python:\r\n      - `ENABLE_PYTHON=ON` It seems that `openvino-dev` needs to be installed first in the detected environment, otherwise a warning message will be thrown in the cmake-gui window.\r\n      - `PYTHON_EXECUTABLE=<python.exe>`\r\n      - `PYTHON_INCLUDE_DIR=<incude directory>`\r\n      - `PYTHON_LIBIRARY=<pythonxx.lib in libs directory>`\r\n    - For OpenCV:\r\n      - `ENABLE_OPENCV=ON`\r\n      - `OpenCV_DIR=<opencv-build-vs2022/install>`\r\n4. Build the library: `cmake --build . --config Release --verbose -j8`\r\n5. Install the library into the `install` directory: `cmake --install . --prefix install`\r\n6. Add the `bin` directory into the environment:\r\n    - `<path>\\install\\runtime\\bin\\intel64\\Release`\r\n    - `<path>\\install\\runtime\\3rdparty\\tbb\\bin`\r\n8. In VS:\r\n    - add the `<path>\\install\\runtime\\include` directory into \"\u89e3\u51b3\u65b9\u6848\u8d44\u6e90\u7ba1\u7406\u5668->\u53f3\u952e\u70b9\u51fb\u5c5e\u6027->VC++\u76ee\u5f55->\u5916\u90e8\u5305\u542b\u76ee\u5f55\"\r\n    - add the `<path>\\install\\runtime\\lib\\intel64\\Release` directory into \"\u89e3\u51b3\u65b9\u6848\u8d44\u6e90\u7ba1\u7406\u5668->\u53f3\u952e\u70b9\u51fb\u5c5e\u6027->VC++\u76ee\u5f55->\u5e93\u76ee\u5f55\"\r\n    - add the \ud83c\udf1f `openvino.lib`, \ud83c\udf1f `openvino_onnx_frontend.lib`, `openvino_c.lib` into \"\u89e3\u51b3\u65b9\u6848\u8d44\u6e90\u7ba1\u7406\u5668->\u53f3\u952e\u70b9\u51fb\u5c5e\u6027->\u94fe\u63a5\u5668->\u8f93\u5165->\u9644\u52a0\u4f9d\u8d56\u9879\"\r\n\r\n## Set DLL path in IDE\r\n\r\n- VS: \"right click on solution -> Properties -> Debugging -> Environment -> `PATH=<path>\\install\\x64\\vc17\\bin;%PATH%`\"\r\n- Qt Creator: \"Projects -> Build & Run -> Build/Run -> Environment -> Details -> Eidt %PATH% -> Add `<path>\\install\\x64\\vc17\\bin`\"\u3002", "top": 0, "createdAt": 1711359483, "style": "", "script": "", "createdDate": "2024-03-25", "dateLabelColor": "#bc4c00"}}, "singeListJson": {}, "displayTitle": "Simpler, Better", "faviconUrl": "https://github.githubassets.com/favicons/favicon.svg", "homeUrl": "https://lartpang.github.io/me", "prevUrl": "disabled", "nextUrl": "disabled"}