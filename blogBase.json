{"singlePage": [], "startSite": "", "filingNum": "", "onePageListNum": 15, "commentLabelColor": "#006b75", "yearColorList": ["#bc4c00", "#0969da", "#1f883d", "#A333D0"], "i18n": "CN", "dayTheme": "light", "nightTheme": "dark", "urlMode": "pinyin", "script": "", "style": "", "bottomText": "", "showPostSource": 1, "UTC": 8, "title": "Simpler, Better", "subTitle": "Just for fun.", "avatarUrl": "https://github.githubassets.com/favicons/favicon.svg", "GMEEK_VERSION": "last", "postListJson": {"P1": {"htmlDir": "docs/post/Build OpenCV and OpenVINO for Windows 10 with VS 2022.html", "label": "opencv", "labelColor": "#3108A9", "postTitle": "Build OpenCV and OpenVINO for Windows 10 with VS 2022", "postUrl": "post/Build%20OpenCV%20and%20OpenVINO%20for%20Windows%2010%20with%20VS%202022.html", "postSourceUrl": "https://github.com/lartpang/me/issues/1", "commentNum": 0, "wordCount": 5369, "description": "In this guide, I will build the two powerful open-source libraries, i.e., OpenCV and OpenVINO for running my deeplearning model on windows 10.\r\nInterestingly, both libraries are closely associated with Intel \ud83d\udda5\ufe0f. \r\n\r\n## OpenCV \ud83d\ude2e \r\n\r\nFirst of all, we must download the related code projects (`opencv` and `opencv_contrib` containing some plugins for `opencv`) into our computer from this links:\r\n\r\n- https://github.com/opencv/opencv/releases\r\n- https://github.com/opencv/opencv_contrib/tags\r\n\r\nMake sure the selected versions of the two libararies are the same.\r\nHere, I choice the latest version `4.7.0`.\r\nBecause we will recompiling them by ourselves, we can just download the source code zip files.\r\nPut the two unpacked libraries into the same parent folder `opencv_dir` as follows:\r\n\r\n```\r\n-opencv_dir\r\n  -opencv-4.7.0\r\n    -...\r\n  -opencv_contrib-4.7.0\r\n    -modules\r\n    -...\r\n```\r\n\r\n**NOTE**: To avoid the network issue that may be encountered during using CMake, we need to add the url proxy prefix `https://ghproxy.com/` before the urls of some setting of the relevant modules like `https://ghproxy.com/https://raw.github***`:\r\n- `.cmake` in `opencv-4.7.0/3rdparty/ippicv`\r\n- `.cmake` in `opencv-4.7.0/3rdparty/ffmpeg`\r\n- `CMakeLists.txt` in `opencv_contrib-4.7.0/modules/face`\r\n- Files in `cmake` of `opencv_contrib-4.7.0/modules/xfeatures2d`\r\n- `CMakeLists.txt` in `opencv_contrib-4.7.0/modules/wechat_qrcode`\r\n- `CMakeLists.txt` in `opencv_contrib-4.7.0/modules/cudaoptflow`\r\n\r\nNext, start compiling OpenCV.\r\n\r\n1. Create the build folder: `cd opencv_dir && mkdir opencv-build-vs2022`\r\n2. Configure and generate the VS solution by CMake with some config items:\r\n  - General:\r\n    - source folder: `<opencv-4.7.0>`\r\n    - build folder: `<opencv-build-vs2022>`\r\n    - `BUILD_OPENCV_WORLD=ON`\r\n    - `CMAKE_BUILD_TYPE=RELEASE`\r\n    - `OPENCV_ENABLE_NONFREE=ON`\r\n    - `BUILD_opencv_dnn=ON`\r\n    - `OPENCV_EXTRA_MODULES_PATH=<opencv_contrib-4.7.0/modules>`\r\n  - CUDA:\r\n    - `WITH_CUDA=ON`\r\n    - `WITH_CUDNN=ON`\r\n    - `WITH_CUBLAS=ON`\r\n    - `WITH_CUFFT=ON`\r\n    - `CUDA_FAST_MATH=ON`\r\n    - `CUDA_ARCH_BIN=7.5` (We can fill the single value corresponding to the real GPU for accelerating the compilation process.)\r\n    - `OPENCV_DNN_CUDA=ON`\r\n3. Go to the build directory: `cd <opencv-build-vs2022>`\r\n4. Start build by cmake and msvc compiler: `cmake --build . --config Release --verbose -j8`\r\n5. Install the built opencv into the `install` folder in the current path: `cmake --install . --prefix install`\r\n6. Add the `bin` directory into the user environment: `<path>\\install\\x64\\vc17\\bin`\r\n7. In VS:\r\n    - add the `<path>\\install\\include` directory into \"\u89e3\u51b3\u65b9\u6848\u8d44\u6e90\u7ba1\u7406\u5668->\u53f3\u952e\u70b9\u51fb\u5c5e\u6027->VC++\u76ee\u5f55->\u5916\u90e8\u5305\u542b\u76ee\u5f55\"\r\n    - add the `<path>\\install\\x64\\vc17\\lib` directory into \"\u89e3\u51b3\u65b9\u6848\u8d44\u6e90\u7ba1\u7406\u5668->\u53f3\u952e\u70b9\u51fb\u5c5e\u6027->VC++\u76ee\u5f55->\u5e93\u76ee\u5f55\"\r\n    - add the `opencv_world470.lib` into \"\u89e3\u51b3\u65b9\u6848\u8d44\u6e90\u7ba1\u7406\u5668->\u53f3\u952e\u70b9\u51fb\u5c5e\u6027->\u94fe\u63a5\u5668->\u8f93\u5165->\u9644\u52a0\u4f9d\u8d56\u9879\"\r\n\r\n## OpenVINO \ud83c\udf70 \r\n\r\nThe document of OpenVINO is intuitive and the readability is better than OpenCV.\r\nThe relevant content about building and installing the libirary is listed in these links:\r\n- https://github.com/openvinotoolkit/openvino/blob/master/docs/dev/build_windows.md\r\n- https://github.com/openvinotoolkit/openvino/blob/master/docs/dev/cmake_options_for_custom_comiplation.md\r\n- https://github.com/openvinotoolkit/openvino/blob/master/docs/dev/installing.md\r\n\r\nAfter building and install the OpenCV library, it's time to move on to OpenVINO.\r\n\r\n1. We need clone the project and the sub modules.\r\n    ```\r\n    git clone https://github.com/openvinotoolkit/openvino.git\r\n    cd openvino\r\n    git submodule update --init --recursive\r\n    ```\r\n2. Create the build folder: `mkdir build && cd build`\r\n3. Configure and generate the VS solution by CMake:\r\n    - `ENABLE_INTEL_GPU=OFF` (We only use the Intel CPU.)\r\n    - Disable some frontend items:\r\n      - `ENABLE_OV_PDPD_FRONTEND=OFF`\r\n      - `ENABLE_OV_TF_FRONTEND=OFF`\r\n      - `ENABLE_OV_TF_LITE_FRONTEND=OFF`\r\n      - `ENABLE_OV_PYTORCH_FRONTEND=OFF`\r\n    - For Python:\r\n      - `ENABLE_PYTHON=ON` It seems that `openvino-dev` needs to be installed first in the detected environment, otherwise a warning message will be thrown in the cmake-gui window.\r\n      - `PYTHON_EXECUTABLE=<python.exe>`\r\n      - `PYTHON_INCLUDE_DIR=<incude directory>`\r\n      - `PYTHON_LIBIRARY=<pythonxx.lib in libs directory>`\r\n    - For OpenCV:\r\n      - `ENABLE_OPENCV=ON`\r\n      - `OpenCV_DIR=<opencv-build-vs2022/install>`\r\n4. Build the library: `cmake --build . --config Release --verbose -j8`\r\n5. Install the library into the `install` directory: `cmake --install . --prefix install`\r\n6. Add the `bin` directory into the environment:\r\n    - `<path>\\install\\runtime\\bin\\intel64\\Release`\r\n    - `<path>\\install\\runtime\\3rdparty\\tbb\\bin`\r\n8. In VS:\r\n    - add the `<path>\\install\\runtime\\include` directory into \"\u89e3\u51b3\u65b9\u6848\u8d44\u6e90\u7ba1\u7406\u5668->\u53f3\u952e\u70b9\u51fb\u5c5e\u6027->VC++\u76ee\u5f55->\u5916\u90e8\u5305\u542b\u76ee\u5f55\"\r\n    - add the `<path>\\install\\runtime\\lib\\intel64\\Release` directory into \"\u89e3\u51b3\u65b9\u6848\u8d44\u6e90\u7ba1\u7406\u5668->\u53f3\u952e\u70b9\u51fb\u5c5e\u6027->VC++\u76ee\u5f55->\u5e93\u76ee\u5f55\"\r\n    - add the \ud83c\udf1f `openvino.lib`, \ud83c\udf1f `openvino_onnx_frontend.lib`, `openvino_c.lib` into \"\u89e3\u51b3\u65b9\u6848\u8d44\u6e90\u7ba1\u7406\u5668->\u53f3\u952e\u70b9\u51fb\u5c5e\u6027->\u94fe\u63a5\u5668->\u8f93\u5165->\u9644\u52a0\u4f9d\u8d56\u9879\"\r\n\r\n## Set DLL path in IDE\r\n\r\n- VS: \"right click on solution -> Properties -> Debugging -> Environment -> `PATH=<path>\\install\\x64\\vc17\\bin;%PATH%`\"\r\n- Qt Creator: \"Projects -> Build & Run -> Build/Run -> Environment -> Details -> Eidt %PATH% -> Add `<path>\\install\\x64\\vc17\\bin`\"\u3002", "top": 0, "createdAt": 1711359483, "style": "", "script": "", "createdDate": "2024-03-25", "dateLabelColor": "#bc4c00"}, "P2": {"htmlDir": "docs/post/Snippets of OpenVINO-CPP for Model Inference.html", "label": "opencv", "labelColor": "#3108A9", "postTitle": "Snippets of OpenVINO-CPP for Model Inference", "postUrl": "post/Snippets%20of%20OpenVINO-CPP%20for%20Model%20Inference.html", "postSourceUrl": "https://github.com/lartpang/me/issues/2", "commentNum": 0, "wordCount": 2045, "description": "## Header File\r\n\r\n```cpp\r\n#include <openvino/openvino.hpp>\r\n```\r\n\r\n## Create Infer Request\r\n\r\n```cpp\r\nvoid preprocessing(std::shared_ptr<ov::Model> model) {\r\n  ov::preprocess::PrePostProcessor ppp(model);\r\n  ppp.input().tensor().set_layout(\"NHWC\"); // input data is NHWC from OpenCV Mat\r\n  ppp.input().model().set_layout(\"NCHW\"); // In the model, the layout is NCHW\r\n  model = ppp.build();\r\n}\r\n\r\nov::Core core;\r\n\r\nauto model = core.read_model(model_path); # can use onnx or openvino's xml file\r\npreprocessing(model);\r\n\r\nauto compiled_model = core.compile_model(model, \"CPU\");  // Or without `\"CPU\"`\r\nauto input_port = compiled_model.input();\r\nauto infer_request = compiled_model.create_infer_request();\r\n```\r\n\r\n## Input and Output\r\n\r\n- single input\r\n\r\n```cpp\r\ninfer_request.set_input_tensor(blob);\r\ninfer_request.crop_net.infer();\r\n```\r\n\r\n- single output\r\n\r\n```cpp\r\nov::Tensor single_output = this->point_net.get_output_tensor(0);\r\n```\r\n\r\n- multiple outputs\r\n\r\n```cpp\r\nov::Tensor multi_outputs0 = this->point_net.get_output_tensor(0);\r\nov::Tensor multi_outputs1 = this->point_net.get_output_tensor(1);\r\n```\r\n\r\n## OpenCV `cv::Mat` <-> OpenVINO `ov::Tensor`\r\n\r\nThe key to these steps is the alignment of the data layout.\r\n\r\n### `cv::Mat` -> `ov::Tensor`\r\n\r\n```cpp\r\n// converting the uint8 3-channels image mat to a float32 tensor\r\nimage.convertTo(image, CV_32FC3, 1.0 / 255);\r\n// NHWC layout as mentioned above. (N=1, C=3)\r\nov::Tensor blob(input_port.get_element_type(), input_port.get_shape(), (float *)image.data);\r\n```\r\n\r\n### `ov::Tensor` -> `cv::Mat`\r\n\r\n```cpp\r\n// tensor follows the NCHW layout, so tensor_shape is (N,C,H,W)\r\nov::Shape tensor_shape = tensor.get_shape();\r\n// Due to N=1 and C=1, we can directly assign all data to a new mat.\r\ncv::Mat mat(tensor_shape[2], tensor_shape[3], CV_32F, tensor.data());\r\n```\r\n\r\n## Reference\r\n\r\n- https://github.com/OpenVINO-dev-contest/YOLOv7_OpenVINO_cpp-python/blob/main/cpp/main_preprocessing.cpp\r\n- https://github.com/openvinotoolkit/openvino/blob/master/samples/cpp/hello_classification/main.cpp\u3002", "top": 0, "createdAt": 1711359665, "style": "", "script": "", "createdDate": "2024-03-25", "dateLabelColor": "#bc4c00"}, "P3": {"htmlDir": "docs/post/Six methods of indexing pixels of Mat in OpenCV.html", "label": "opencv", "labelColor": "#3108A9", "postTitle": "Six methods of indexing pixels of Mat in OpenCV", "postUrl": "post/Six%20methods%20of%20indexing%20pixels%20of%20Mat%20in%20OpenCV.html", "postSourceUrl": "https://github.com/lartpang/me/issues/3", "commentNum": 0, "wordCount": 3162, "description": "## `.at<>()`\r\n\r\n```cpp\r\n// modify the pixel directly\r\nfor (int h = 0; h < image.rows; ++h) {\r\n    for (int w = 0; w < image.cols; ++w) {\r\n        image.at<Vec3b>(h, w)[0] = 255;\r\n        image.at<Vec3b>(h, w)[1] = 0;\r\n        image.at<Vec3b>(h, w)[2] = 0;\r\n    }\r\n}\r\n\r\n// modify the pixel by the reference\r\nfor (int h = 0; h < image.rows; ++h) {\r\n    for (int w = 0; w < image.cols; ++w) {\r\n        Vec3b& bgr = image.at<Vec3b>(h, w);\r\n        bgr.val[0] = 0;\r\n        bgr.val[1] = 255;\r\n        bgr.val[2] = 0;\r\n    }\r\n}\r\n\r\n// the image has one channel\r\nfor (int h = 0; h < image.rows; ++h) {\r\n    for (int w = 0; w < image.cols / 2; ++w) {\r\n        image.at<uchar>(h, w) = 128;\r\n    }\r\n}\r\n```\r\n\r\n## `.ptr<>()`\r\n\r\n```cpp\r\n// use uchar type\r\nfor (int h = 0; h < image.rows; ++h) {\r\n    for (int w = 0; w < image.cols / 2; ++w) {\r\n        uchar* ptr = image.ptr<uchar>(h, w);\r\n        ptr[0] = 255;\r\n        ptr[1] = 0;\r\n        ptr[2] = 0;\r\n    }\r\n}\r\n// use cv::Vec3b type\r\nfor (int h = 0; h < image.rows; ++h) {\r\n    for (int w = 0; w < image.cols / 2; ++w) {\r\n        Vec3b* ptr = image.ptr<Vec3b>(h, w);\r\n        ptr->val[0] = 0;\r\n        ptr->val[1] = 255;\r\n        ptr->val[2] = 0;\r\n    }\r\n}\r\n\r\n// use the row pointer and the image has one channel\r\nfor (int h = 0; h < image.rows; ++h) {\r\n    uchar* ptr = image.ptr(h);\r\n    for (int w = 0; w < image.cols / 2; ++w) {\r\n        ptr[w] = 128;\r\n    }\r\n}\r\n\r\n// use the pixel pointer and the image has one channel\r\nfor (int h = 0; h < image.rows; ++h) {\r\n    for (int w = 0; w < image.cols / 2; ++w) {\r\n        uchar* ptr = image.ptr<uchar>(h, w);\r\n        *ptr = 255;\r\n    }\r\n}\r\n```\r\n\r\n## `iterator`\r\n\r\n```cpp\r\n// the image has three channels\r\nMat_<Vec3b>::iterator it = image.begin<Vec3b>();\r\nMat_<Vec3b>::iterator itend = image.end<Vec3b>();\r\nfor (; it != itend; ++it) {\r\n    (*it)[0] = 255;\r\n    (*it)[1] = 0;\r\n    (*it)[2] = 0;\r\n}\r\n\r\n// the image has one channel\r\nMat_<uchar>::iterator it1 = image.begin<uchar>();\r\nMat_<uchar>::iterator itend1 = image.end<uchar>();\r\nfor (; it1 != itend1; ++it1) {\r\n    (*it1) = 128;\r\n}\r\n```\r\n\r\n## `.data` pointer\r\n\r\n```cpp\r\n// 3 channels\r\nuchar* data = image.data;\r\nfor (int h = 0; h < image.rows; ++h) {\r\n    for (int w = 0; w < image.cols / 2; ++w) {\r\n        *data++ = 128;\r\n        *data++ = 128;\r\n        *data++ = 128;\r\n    }\r\n}\r\n\r\n// 1 channel\r\nuchar* data = image.data;\r\nfor (int h = 0; h < image.rows; ++h) {\r\n    for (int w = 0; w < image.cols / 2; ++w) {\r\n        *data++ = 128;\r\n    }\r\n}\r\n```\r\n\r\n## `.row()` and `.col()`\r\n\r\n```cpp\r\nfor (int i = 0; i < 100; ++i) {\r\n    image.row(i).setTo(Scalar(0, 0, 0)); // modify the i th row data\r\n    image.col(i).setTo(Scalar(0, 0, 0)); // modify the i th column data\r\n}\r\n```\r\n\r\n## when `isContinuous()` is true\r\n\r\n```cpp\r\nMat image = imread(\"...\");\r\nint nRows = image.rows;\r\nint nCols = image.cols * image.channels();\r\n\r\nif (image.isContinuous()) {\r\n    nCols = nRows * nCols;\r\n    nRows = 1;\r\n}\r\n\r\nfor (int h = 0; h < nRows; ++h) {\r\n    uchar* ptr = image.ptr<uchar>(h);\r\n    for (int w = 0; w < nCols; ++w) {\r\n        // ptr[w] = 128 ;\r\n        *ptr++ = 128;\r\n    }\r\n}\r\n```\r\n\r\n## Reference\r\n\r\n- http://t.csdn.cn/bSDNn\r\n\u3002", "top": 0, "createdAt": 1711359712, "style": "", "script": "", "createdDate": "2024-03-25", "dateLabelColor": "#bc4c00"}, "P4": {"htmlDir": "docs/post/Tips for Qt.html", "label": "qt", "labelColor": "#5B7F97", "postTitle": "Tips for Qt", "postUrl": "post/Tips%20for%20Qt.html", "postSourceUrl": "https://github.com/lartpang/me/issues/4", "commentNum": 0, "wordCount": 190, "description": "## Set a proper mirror for MaintenanceTool.exe\r\n\r\nFrom: https://mirrors.tuna.tsinghua.edu.cn/help/qt/\r\n\r\n```shell\r\n.\\MaintenanceTool.exe --mirror https://mirrors.tuna.tsinghua.edu.cn/qt\r\n```\u3002", "top": 0, "createdAt": 1711360178, "style": "", "script": "", "createdDate": "2024-03-25", "dateLabelColor": "#bc4c00"}}, "singeListJson": {}, "displayTitle": "Simpler, Better", "faviconUrl": "https://github.githubassets.com/favicons/favicon.svg", "homeUrl": "https://lartpang.github.io/me", "prevUrl": "disabled", "nextUrl": "disabled"}